name: Release Build

env:
  DEBUG: napi:*
  APP_NAME: sha

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main
  # workflow_call:

jobs:
  build-binding:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - os: macos-latest
            target: x86_64-apple-darwin
            build: pnpm build:native --target x86_64-apple-darwin

          - os: macos-latest
            target: aarch64-apple-darwin
            build: |
              export CARGO_BUILD_TARGET=aarch64-apple-darwin;
              pnpm build:native --target aarch64-apple-darwin

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            build: pnpm build:native --target x86_64-pc-windows-msvc

          - os: windows-latest
            target: i686-pc-windows-msvc
            build: |
              export CARGO_BUILD_TARGET=i686-pc-windows-msvc;
              pnpm build:native --target i686-pc-windows-msvc

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            build: |
              export CARGO_BUILD_TARGET=aarch64-pc-windows-msvc;
              pnpm build:native --target aarch64-pc-windows-msvc

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |
              export CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu;
              export CC=clang;
              pnpm build:native --target x86_64-unknown-linux-gnu

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: pnpm build:native --target x86_64-unknown-linux-musl

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: |
              export CARGO_BUILD_TARGET=aarch64-unknown-linux-gnu;
              export CC=clang;
              pnpm build:native --target aarch64-unknown-linux-gnu

          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: |
              export CARGO_BUILD_TARGET=armv7-unknown-linux-gnueabihf;
              export CC=clang;
              pnpm build:native --target armv7-unknown-linux-gnueabihf

          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            build: |
              export CARGO_BUILD_TARGET=armv7-unknown-linux-musleabihf;
              export CC=clang;
              pnpm build:native --target armv7-unknown-linux-musleabihf

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-riscv64-linux-gnu -y
            build: |
              export CARGO_BUILD_TARGET=aarch64-unknown-linux-musl;
              pnpm build:native --target aarch64-unknown-linux-musl

          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            build: |
              export CARGO_BUILD_TARGET=riscv64gc-unknown-linux-gnu;
              pnpm build:native --target riscv64gc-unknown-linux-gnu

    name: Build on ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          cache-key: release-build

      - name: Rustup Adds Target
        run: rustup target add ${{ matrix.settings.target }}

      - name: Setup Node
        uses: ./.github/actions/setup-node

      - name: Setup toolchain
        if: ${{ matrix.settings.setup }}
        run: ${{ matrix.settings.setup }}
        shell: bash

      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') || contains(matrix.settings.target, 'linux-gnu') }}
        with:
          version: 0.13.0

      - uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') || contains(matrix.settings.target, 'linux-gnu') }}
        # env:
        #   GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild

      - name: Build Binding
        run: ${{ matrix.settings.build }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: algorithm/sha/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  build-node:
    name: Build Node Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: ./.github/actions/setup-node

      - name: Build Node Package
        run: pnpm run build:node

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-artifact
          path: packages/sri/dist
          if-no-files-found: error